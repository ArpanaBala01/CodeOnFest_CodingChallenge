// 1. Chef- Detective


// 2. Valid Parenthesis
class Solution {
    public boolean isValid(String s) {
        Stack <Character> stack = new Stack <Character>();
        
        if(s.length() % 2 == 1)
            return false;
        for(int i = 0; i<s.length(); i++){
            if(s.charAt(i) == '(' )
                stack.push ( ')' ) ;
            
            else if (s.charAt(i) == '{' )
                stack.push ( '}' );
                     
            else if(s.charAt(i) == '[' )
                stack.push ( ']' );
                    
            else if (stack.isEmpty() || stack.pop() != s.charAt(i))
                    return false;
            
        }
        return stack.isEmpty();
        
    }
}

// 3. Reverse String using Stack
class Solution {
    
    public String reverse(StringBuffer S){
        //code here
        int n = S.length();
        Stack obj = new Stack(n);
        
        for(int i=0; i<n; i++){
            obj.push(S.charAt(i));
        }
        
        for(int i=0; i<n; i++){
            char ch = obj.pop();
            S.setCharAt(i, ch);
        }
        
    }
}
    
class Stack{
    int size;
    int top;
    char []a;
    
    boolean isEmpty(char x){
        if(top >= size)
        {
            return false;
        }
        else{
            a[++top] = x;
            return true;
        }
    }
    
    Stack(int n){
        int top = -1;
        int size = n;
        a = new char [size];
    }
    boolean push (char x){
        if(top>= size){
            return false;
        }
        else{
            a[++top] = x;
            return true;
        }
    }
    
    char pop(){
        if(top<0){
            return 0;
        }
        else{
            char x = a[top--];
            return x;
        }
    }
}
