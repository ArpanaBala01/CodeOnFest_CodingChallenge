// 1. Design HashMap
class ListNode {
    int key, val;
    ListNode next;
    public ListNode(int key, int val, ListNode next) {
        this.key = key;
        this.val = val;
        this.next = next;
    }
}

class MyHashMap {
    
     
    static final int size = 19997;
    static final int mult = 12582917;
    ListNode[] data;

    /** Initialize your data structure here. */
    public MyHashMap() {
        this.data = new ListNode[size];
    }
    
     private int hash(int key) {
        return (int)((long)key * mult % size);
    }
    
    /** value will always be non-negative. */
    public void put(int key, int value) {
        remove(key);
        int h = hash(key);
        ListNode node = new ListNode(key, value, data[h]);
        data[h] = node;
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        int h = hash(key);
        ListNode node = data[h];
        for (; node != null; node = node.next)
            if (node.key == key) return node.val;
        return -1;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        int h = hash(key);
        ListNode node = data[h];
        if (node == null) return;
        if (node.key == key) data[h] = node.next;
        else for (; node.next != null; node = node.next)
            if (node.next.key == key) {
                node.next = node.next.next;
                return;
            }
    }
}


// 2. Twice Counter

class Solution
{
    public int countWords(String list[], int n)
    {
        // code here
         HashMap<String, Integer> m = new HashMap<>();
            
            for(int i=0; i<n; i++){
                if(m.containsKey(list[i])){
                    
                    int get = m.get(list[i]);
                     m.put(list[i], get+1);
                }
                else{
                    m.put(list[i], 1);
                }
            }
            int ans = 0;
            for(Map.Entry<String, Integer> it: m.entrySet()){
                if(it.getValue() == 2){
                    ans++;
                }
            }
            return ans;
    }
}

// 3. THESAV
