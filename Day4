// 1.
// 2. Two sum
class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        int[] res = new int[2];
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i=0; i<nums.length; i++){
            if(map.containsKey(target-nums[i])){
                res[1] = i;
                res[0] =map.get(target-nums[i]);
                return res;
            }
            map.put(nums[i],i);
        }
        return res;
        
        
    }
}

// 3. Longest Consecutive Sequence
class Solution {
    public int longestConsecutive(int[] nums) {
        
        Set<Integer> set = new HashSet<>();

        for (int n : nums)
            set.add(n);

        int maxLen = 0;
        int i = 0;
        while (!set.isEmpty()) {
            
            int num = nums[i] + 1;
            int len = 0;
            while (set.contains(--num)) {
                set.remove(num);
                len++;
            }
            num = nums[i];
            while (set.contains(++num)) {
                
                set.remove(num);
                len++;
        }

           if (len > maxLen)
               maxLen = len;

            i++;
     }
     return maxLen;
       
    }
}
