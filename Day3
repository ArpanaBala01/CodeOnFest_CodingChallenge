// 1. Minimum Swaps to Sort 

class Solution
{
    //Function to find the minimum number of swaps required to sort the array.
    public int minSwaps(int nums[])
    {
        // Code here
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int i=0; i<nums.length; i++){
            map.put(nums[i], i);
        }
        Arrays.sort(nums);
        
        boolean[] travelled = new boolean [nums.length];
        Arrays.fill(travelled, false);
        
        int result = 0;
        for(int i=0; i<nums.length; i++){
            if(travelled[i] || map.get(nums[i]) == i)
                continue;
            int j=i, cycle_len=0;
            while(!travelled[j]){
                travelled[j] =true;
                j = map.get(nums[j]);
                cycle_len ++;
            }
            if(cycle_len > 0){
                result += (cycle_len -1);
            }
        }
        return result;
    }
}


// 2. K-th Element of Two sorted Array 
class Solution {
    public long kthElement( int arr1[], int arr2[], int n, int m, int k) {
        int x=0, i=0, j=0;
        while(i<m && j<n){
            if(arr1[i] < arr2[j]){
                x++;
                if(x==k)
                   return arr1[i];
                i++;
            }
            else{
                x++;
                if(x==k)
                   return arr2[j];
                j++;
            }
        }
        
        while(i<m){
            x++;
            if(x==k)
               return arr1[i];
            i++;
        }
        
        while(j<n){
            x++;
            if(x==k)
               return arr2[j];
            j++;
        }
        return -1;
        
    }
};

// 3. Group Anagrams
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> map = new HashMap<>();
        
        for(String s : strs){
            char charArray[] = s.toCharArray();
            Arrays.sort(charArray);
            String sorted = new String(charArray);
            
            if(!map.containsKey(sorted))
                map.put(sorted, new LinkedList<String>());
            map.get(sorted).add(s);
        }
        return new LinkedList<>(map.values());
    }
}
